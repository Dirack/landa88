#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# SConstruct (Python3)
# 
# Purpose: Full velocity inversion with NIP tomography.
# Velocity model with plane interfaces.
# 
# Site: https://dirack.github.io
# 
# Version 1.0
# 
# Programmer: Rodolfo A C Neves (Dirack) 31/01/2022
# 
# Email: rodolfo_profissional@hotmail.com
# 
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.

# Madagascar Package
from rsf.proj import *

# Madagascar Recipes
from rsf.recipes.pefInterpolation2 import pefInterpolation as pef
from rsf.recipes.kimodel import multiLayerModel as mlmod
from rsf.recipes.kimodel import kirchhoffNewtonModeling as kinewmod
from rsf.recipes.kimodel import arr2str

# Main Files
trueModel='trueModel'
stackedSection='stackedSection'
parametersCube='parametersCube'
dataCube='multiLayerDataCube'
interpolatedDataCube='interpolatedDataCube2'

# Establish building dependencies
Depends('interpolatedDataCube.rsf','multiLayerDataCube.rsf')
Depends('interpolatedDataCube2.rsf','interpolatedDataCube.rsf')
Depends('crsParameters-m0-0-t0-0.rsf','interpolatedDataCube2.rsf')

# Original velocity model
xmax = 6.0
zmax = 4.0

layers = ((1.00,1.0,1.0,1.00),(1.85,1.85,1.85,1.85))

velocities = (1.508,
              2.0,3.0)

### Modeling ###

# Generate multi layer model
mlmod(interfaces='interfaces',
        dipsfile='interfacesDip',
        modelfile=trueModel,
        xmax=xmax,
        zmax=zmax,
        layers=layers,
        velocities=velocities)

# plot the original velocity model
Result(trueModel,
	'''
	grey color=j scalebar=y label1=Depth unit1=km
	label2=Position unit2=km barlabel=Velocity barunit=km/s
	barreverse=y title="Velocity Model - Plane Interfaces" allpos=yi bias=1.0
	''')

# Generate a modeled data cube
nt=1001
dt=0.004
nm=241
dm=0.025
nh=161
dh=0.025

kinewmod(reflectors='interfaces',
        reflectorsDip='interfacesDip',
        filename='multiLayerDataCube',
        velocities=velocities,
        nt=nt,
        dt=dt,
        ns=nm,
        ds=dm,
        nh=nh,
        dh=dh)

### PEF interpolation ###

# Use default value or pass through command line
# PEF coeficients and PEF Smooth radius
a1=int(ARGUMENTS.get('a1',10))
a2=int(ARGUMENTS.get('a2',2))
rect1=int(ARGUMENTS.get('rect1',50))
rect2=int(ARGUMENTS.get('rect2',2))

# Number of offsets to interpolate
nhi=int(ARGUMENTS.get('nhi',nh))

pef(dataCube=dataCube,
    interpolated='interpolatedDataCube',
    nm=nm,
    dm=dm,
    nt=nt,
    dt=dt,
    nhi=nhi,
    a1=a1,
    a2=a2,
    rect1=rect1,
    rect2=rect2)

# Do the PEF interpolation one more time
# to increase the CMP sampling
pef('interpolatedDataCube',
    interpolatedDataCube,
    nm=2*nm,
    dm=dm/2.0,
    nt=nt,
    dt=dt,
    nhi=nhi,
    a1=a1,
    a2=a2,
    rect1=rect1,
    rect2=rect2)

End()
